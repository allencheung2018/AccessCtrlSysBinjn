// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `FaceAlg.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package FaceAlg;

public class Image implements java.lang.Cloneable, java.io.Serializable
{
    public byte[] data;

    public String url;

    public Image()
    {
        url = "";
    }

    public Image(byte[] data, String url)
    {
        this.data = data;
        this.url = url;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Image _r = null;
        if(rhs instanceof Image)
        {
            _r = (Image)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(data, _r.data))
            {
                return false;
            }
            if(url != _r.url)
            {
                if(url == null || _r.url == null || !url.equals(_r.url))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::FaceAlg::Image");
        __h = IceInternal.HashUtil.hashAdd(__h, data);
        __h = IceInternal.HashUtil.hashAdd(__h, url);
        return __h;
    }

    public Image
    clone()
    {
        Image c = null;
        try
        {
            c = (Image)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        ByteSeqHelper.write(__os, data);
        __os.writeString(url);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        data = ByteSeqHelper.read(__is);
        url = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, Image __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public Image
    __read(IceInternal.BasicStream __is, Image __v)
    {
        if(__v == null)
        {
             __v = new Image();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final Image __nullMarshalValue = new Image();

    public static final long serialVersionUID = 507782620L;
}
