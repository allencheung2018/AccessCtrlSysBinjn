// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `FaceAlg.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package FaceAlg;

public abstract class _FaceAlgSvrDisp extends Ice.ObjectImpl implements FaceAlgSvr
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::FaceAlg::FaceAlgSvr",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final boolean AddFace(String faceSetId, float[] fea, String faceId)
    {
        return AddFace(faceSetId, fea, faceId, null);
    }

    public final boolean CreateFaceSet(String id, FaceAlgType type)
    {
        return CreateFaceSet(id, type, null);
    }

    public final boolean DeleteFace(String faceSetId, String faceId)
    {
        return DeleteFace(faceSetId, faceId, null);
    }

    public final boolean DeleteFaceSet(String id)
    {
        return DeleteFaceSet(id, null);
    }

    public final FaceInfo[] Detect(Image img)
    {
        return Detect(img, null);
    }

    public final FaceInfo[] DetectNIR(Image img)
    {
        return DetectNIR(img, null);
    }

    public final FaceInfo[] DetectSimple(Image img)
    {
        return DetectSimple(img, null);
    }

    public final FaceInfo[] DetectSimpleNIR(Image img)
    {
        return DetectSimpleNIR(img, null);
    }

    public final String[] GetAllFaceId(String faceSetId)
    {
        return GetAllFaceId(faceSetId, null);
    }

    public final int GetFaceCount(String faceSetId)
    {
        return GetFaceCount(faceSetId, null);
    }

    public final float MatchFeatures(float[] fea1, float[] fea2)
    {
        return MatchFeatures(fea1, fea2, null);
    }

    public final float MatchFeaturesNIR(float[] fea1, float[] fea2)
    {
        return MatchFeaturesNIR(fea1, fea2, null);
    }

    public final float MatchImage(Image img1, Image img2)
    {
        return MatchImage(img1, img2, null);
    }

    public final float MatchImageNIR(Image img1, Image img2)
    {
        return MatchImageNIR(img1, img2, null);
    }

    public final RecogResult[] RecognizeFeatures(String faceSetId, float[] fea, int n)
    {
        return RecognizeFeatures(faceSetId, fea, n, null);
    }

    public final RecogResult[] RecognizeFeaturesNIR(String faceSetId, float[] fea, int n)
    {
        return RecognizeFeaturesNIR(faceSetId, fea, n, null);
    }

    public final FaceInfoEx[] RecognizeImage(String faceSetId, Image img, int n)
    {
        return RecognizeImage(faceSetId, img, n, null);
    }

    public final FaceInfoEx[] RecognizeImageNIR(String faceSetId, Image img, int n)
    {
        return RecognizeImageNIR(faceSetId, img, n, null);
    }

    public static Ice.DispatchStatus ___Detect(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Image img = null;
        img = Image.__read(__is, img);
        __inS.endReadParams();
        FaceInfo[] __ret = __obj.Detect(img, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FaceInfoSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___DetectSimple(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Image img = null;
        img = Image.__read(__is, img);
        __inS.endReadParams();
        FaceInfo[] __ret = __obj.DetectSimple(img, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FaceInfoSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___MatchImage(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Image img1 = null;
        Image img2 = null;
        img1 = Image.__read(__is, img1);
        img2 = Image.__read(__is, img2);
        __inS.endReadParams();
        float __ret = __obj.MatchImage(img1, img2, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeFloat(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___MatchFeatures(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        float[] fea1;
        float[] fea2;
        fea1 = FloatSeqHelper.read(__is);
        fea2 = FloatSeqHelper.read(__is);
        __inS.endReadParams();
        float __ret = __obj.MatchFeatures(fea1, fea2, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeFloat(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___RecognizeImage(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        Image img = null;
        int n;
        faceSetId = __is.readString();
        img = Image.__read(__is, img);
        n = __is.readInt();
        __inS.endReadParams();
        FaceInfoEx[] __ret = __obj.RecognizeImage(faceSetId, img, n, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FaceInfoExSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___RecognizeFeatures(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        float[] fea;
        int n;
        faceSetId = __is.readString();
        fea = FloatSeqHelper.read(__is);
        n = __is.readInt();
        __inS.endReadParams();
        RecogResult[] __ret = __obj.RecognizeFeatures(faceSetId, fea, n, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        RecogResultSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___DetectNIR(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Image img = null;
        img = Image.__read(__is, img);
        __inS.endReadParams();
        FaceInfo[] __ret = __obj.DetectNIR(img, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FaceInfoSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___DetectSimpleNIR(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Image img = null;
        img = Image.__read(__is, img);
        __inS.endReadParams();
        FaceInfo[] __ret = __obj.DetectSimpleNIR(img, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FaceInfoSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___MatchImageNIR(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Image img1 = null;
        Image img2 = null;
        img1 = Image.__read(__is, img1);
        img2 = Image.__read(__is, img2);
        __inS.endReadParams();
        float __ret = __obj.MatchImageNIR(img1, img2, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeFloat(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___MatchFeaturesNIR(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        float[] fea1;
        float[] fea2;
        fea1 = FloatSeqHelper.read(__is);
        fea2 = FloatSeqHelper.read(__is);
        __inS.endReadParams();
        float __ret = __obj.MatchFeaturesNIR(fea1, fea2, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeFloat(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___RecognizeImageNIR(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        Image img = null;
        int n;
        faceSetId = __is.readString();
        img = Image.__read(__is, img);
        n = __is.readInt();
        __inS.endReadParams();
        FaceInfoEx[] __ret = __obj.RecognizeImageNIR(faceSetId, img, n, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FaceInfoExSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___RecognizeFeaturesNIR(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        float[] fea;
        int n;
        faceSetId = __is.readString();
        fea = FloatSeqHelper.read(__is);
        n = __is.readInt();
        __inS.endReadParams();
        RecogResult[] __ret = __obj.RecognizeFeaturesNIR(faceSetId, fea, n, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        RecogResultSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___CreateFaceSet(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        FaceAlgType type;
        id = __is.readString();
        type = FaceAlgType.__read(__is);
        __inS.endReadParams();
        boolean __ret = __obj.CreateFaceSet(id, type, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___DeleteFaceSet(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String id;
        id = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.DeleteFaceSet(id, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___GetFaceCount(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        faceSetId = __is.readString();
        __inS.endReadParams();
        int __ret = __obj.GetFaceCount(faceSetId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___GetAllFaceId(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        faceSetId = __is.readString();
        __inS.endReadParams();
        String[] __ret = __obj.GetAllFaceId(faceSetId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        StringSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___AddFace(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        float[] fea;
        String faceId;
        faceSetId = __is.readString();
        fea = FloatSeqHelper.read(__is);
        faceId = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.AddFace(faceSetId, fea, faceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___DeleteFace(FaceAlgSvr __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String faceSetId;
        String faceId;
        faceSetId = __is.readString();
        faceId = __is.readString();
        __inS.endReadParams();
        boolean __ret = __obj.DeleteFace(faceSetId, faceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "AddFace",
        "CreateFaceSet",
        "DeleteFace",
        "DeleteFaceSet",
        "Detect",
        "DetectNIR",
        "DetectSimple",
        "DetectSimpleNIR",
        "GetAllFaceId",
        "GetFaceCount",
        "MatchFeatures",
        "MatchFeaturesNIR",
        "MatchImage",
        "MatchImageNIR",
        "RecognizeFeatures",
        "RecognizeFeaturesNIR",
        "RecognizeImage",
        "RecognizeImageNIR",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___AddFace(this, in, __current);
            }
            case 1:
            {
                return ___CreateFaceSet(this, in, __current);
            }
            case 2:
            {
                return ___DeleteFace(this, in, __current);
            }
            case 3:
            {
                return ___DeleteFaceSet(this, in, __current);
            }
            case 4:
            {
                return ___Detect(this, in, __current);
            }
            case 5:
            {
                return ___DetectNIR(this, in, __current);
            }
            case 6:
            {
                return ___DetectSimple(this, in, __current);
            }
            case 7:
            {
                return ___DetectSimpleNIR(this, in, __current);
            }
            case 8:
            {
                return ___GetAllFaceId(this, in, __current);
            }
            case 9:
            {
                return ___GetFaceCount(this, in, __current);
            }
            case 10:
            {
                return ___MatchFeatures(this, in, __current);
            }
            case 11:
            {
                return ___MatchFeaturesNIR(this, in, __current);
            }
            case 12:
            {
                return ___MatchImage(this, in, __current);
            }
            case 13:
            {
                return ___MatchImageNIR(this, in, __current);
            }
            case 14:
            {
                return ___RecognizeFeatures(this, in, __current);
            }
            case 15:
            {
                return ___RecognizeFeaturesNIR(this, in, __current);
            }
            case 16:
            {
                return ___RecognizeImage(this, in, __current);
            }
            case 17:
            {
                return ___RecognizeImageNIR(this, in, __current);
            }
            case 18:
            {
                return ___ice_id(this, in, __current);
            }
            case 19:
            {
                return ___ice_ids(this, in, __current);
            }
            case 20:
            {
                return ___ice_isA(this, in, __current);
            }
            case 21:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
