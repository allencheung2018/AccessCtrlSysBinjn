// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `FaceAlg.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package FaceAlg;

/**
 * Provides type-specific helper functions.
 **/
public final class FaceAlgSvrPrxHelper extends Ice.ObjectPrxHelperBase implements FaceAlgSvrPrx
{
    private static final String __AddFace_name = "AddFace";

    public boolean AddFace(String faceSetId, float[] fea, String faceId)
    {
        return AddFace(faceSetId, fea, faceId, null, false);
    }

    public boolean AddFace(String faceSetId, float[] fea, String faceId, java.util.Map<String, String> __ctx)
    {
        return AddFace(faceSetId, fea, faceId, __ctx, true);
    }

    private boolean AddFace(String faceSetId, float[] fea, String faceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__AddFace_name);
        return end_AddFace(begin_AddFace(faceSetId, fea, faceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, float[] fea, String faceId)
    {
        return begin_AddFace(faceSetId, fea, faceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, float[] fea, String faceId, java.util.Map<String, String> __ctx)
    {
        return begin_AddFace(faceSetId, fea, faceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, float[] fea, String faceId, Ice.Callback __cb)
    {
        return begin_AddFace(faceSetId, fea, faceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, float[] fea, String faceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_AddFace(faceSetId, fea, faceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, float[] fea, String faceId, Callback_FaceAlgSvr_AddFace __cb)
    {
        return begin_AddFace(faceSetId, fea, faceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, float[] fea, String faceId, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_AddFace __cb)
    {
        return begin_AddFace(faceSetId, fea, faceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, 
                                         float[] fea, 
                                         String faceId, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_AddFace(faceSetId, fea, faceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, 
                                         float[] fea, 
                                         String faceId, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_AddFace(faceSetId, fea, faceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, 
                                         float[] fea, 
                                         String faceId, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_AddFace(faceSetId, fea, faceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_AddFace(String faceSetId, 
                                         float[] fea, 
                                         String faceId, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_AddFace(faceSetId, fea, faceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_AddFace(String faceSetId, 
                                          float[] fea, 
                                          String faceId, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_BoolCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_AddFace(faceSetId, fea, faceId, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         FaceAlgSvrPrxHelper.__AddFace_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_AddFace(String faceSetId, 
                                          float[] fea, 
                                          String faceId, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__AddFace_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__AddFace_name, __cb);
        try
        {
            __result.prepare(__AddFace_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            FloatSeqHelper.write(__os, fea);
            __os.writeString(faceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_AddFace(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __AddFace_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __AddFace_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_AddFace(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __CreateFaceSet_name = "CreateFaceSet";

    public boolean CreateFaceSet(String id, FaceAlgType type)
    {
        return CreateFaceSet(id, type, null, false);
    }

    public boolean CreateFaceSet(String id, FaceAlgType type, java.util.Map<String, String> __ctx)
    {
        return CreateFaceSet(id, type, __ctx, true);
    }

    private boolean CreateFaceSet(String id, FaceAlgType type, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__CreateFaceSet_name);
        return end_CreateFaceSet(begin_CreateFaceSet(id, type, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, FaceAlgType type)
    {
        return begin_CreateFaceSet(id, type, null, false, false, null);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, FaceAlgType type, java.util.Map<String, String> __ctx)
    {
        return begin_CreateFaceSet(id, type, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, FaceAlgType type, Ice.Callback __cb)
    {
        return begin_CreateFaceSet(id, type, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, FaceAlgType type, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_CreateFaceSet(id, type, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, FaceAlgType type, Callback_FaceAlgSvr_CreateFaceSet __cb)
    {
        return begin_CreateFaceSet(id, type, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, FaceAlgType type, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_CreateFaceSet __cb)
    {
        return begin_CreateFaceSet(id, type, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, 
                                               FaceAlgType type, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_CreateFaceSet(id, type, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, 
                                               FaceAlgType type, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_CreateFaceSet(id, type, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, 
                                               FaceAlgType type, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_CreateFaceSet(id, type, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_CreateFaceSet(String id, 
                                               FaceAlgType type, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_CreateFaceSet(id, type, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_CreateFaceSet(String id, 
                                                FaceAlgType type, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_CreateFaceSet(id, type, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               FaceAlgSvrPrxHelper.__CreateFaceSet_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_CreateFaceSet(String id, 
                                                FaceAlgType type, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__CreateFaceSet_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__CreateFaceSet_name, __cb);
        try
        {
            __result.prepare(__CreateFaceSet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            FaceAlgType.__write(__os, type);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_CreateFaceSet(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __CreateFaceSet_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __CreateFaceSet_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_CreateFaceSet(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __DeleteFace_name = "DeleteFace";

    public boolean DeleteFace(String faceSetId, String faceId)
    {
        return DeleteFace(faceSetId, faceId, null, false);
    }

    public boolean DeleteFace(String faceSetId, String faceId, java.util.Map<String, String> __ctx)
    {
        return DeleteFace(faceSetId, faceId, __ctx, true);
    }

    private boolean DeleteFace(String faceSetId, String faceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__DeleteFace_name);
        return end_DeleteFace(begin_DeleteFace(faceSetId, faceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, String faceId)
    {
        return begin_DeleteFace(faceSetId, faceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, String faceId, java.util.Map<String, String> __ctx)
    {
        return begin_DeleteFace(faceSetId, faceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, String faceId, Ice.Callback __cb)
    {
        return begin_DeleteFace(faceSetId, faceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, String faceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DeleteFace(faceSetId, faceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, String faceId, Callback_FaceAlgSvr_DeleteFace __cb)
    {
        return begin_DeleteFace(faceSetId, faceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, String faceId, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_DeleteFace __cb)
    {
        return begin_DeleteFace(faceSetId, faceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, 
                                            String faceId, 
                                            IceInternal.Functional_BoolCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DeleteFace(faceSetId, faceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, 
                                            String faceId, 
                                            IceInternal.Functional_BoolCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteFace(faceSetId, faceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, 
                                            String faceId, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_BoolCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DeleteFace(faceSetId, faceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DeleteFace(String faceSetId, 
                                            String faceId, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_BoolCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteFace(faceSetId, faceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_DeleteFace(String faceSetId, 
                                             String faceId, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteFace(faceSetId, faceId, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            FaceAlgSvrPrxHelper.__DeleteFace_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_DeleteFace(String faceSetId, 
                                             String faceId, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DeleteFace_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__DeleteFace_name, __cb);
        try
        {
            __result.prepare(__DeleteFace_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            __os.writeString(faceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_DeleteFace(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __DeleteFace_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __DeleteFace_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_DeleteFace(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __DeleteFaceSet_name = "DeleteFaceSet";

    public boolean DeleteFaceSet(String id)
    {
        return DeleteFaceSet(id, null, false);
    }

    public boolean DeleteFaceSet(String id, java.util.Map<String, String> __ctx)
    {
        return DeleteFaceSet(id, __ctx, true);
    }

    private boolean DeleteFaceSet(String id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__DeleteFaceSet_name);
        return end_DeleteFaceSet(begin_DeleteFaceSet(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id)
    {
        return begin_DeleteFaceSet(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, java.util.Map<String, String> __ctx)
    {
        return begin_DeleteFaceSet(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, Ice.Callback __cb)
    {
        return begin_DeleteFaceSet(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DeleteFaceSet(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, Callback_FaceAlgSvr_DeleteFaceSet __cb)
    {
        return begin_DeleteFaceSet(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_DeleteFaceSet __cb)
    {
        return begin_DeleteFaceSet(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DeleteFaceSet(id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteFaceSet(id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DeleteFaceSet(id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DeleteFaceSet(String id, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteFaceSet(id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_DeleteFaceSet(String id, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteFaceSet(id, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               FaceAlgSvrPrxHelper.__DeleteFaceSet_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_DeleteFaceSet(String id, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DeleteFaceSet_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__DeleteFaceSet_name, __cb);
        try
        {
            __result.prepare(__DeleteFaceSet_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_DeleteFaceSet(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __DeleteFaceSet_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __DeleteFaceSet_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_DeleteFaceSet(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __Detect_name = "Detect";

    public FaceInfo[] Detect(Image img)
    {
        return Detect(img, null, false);
    }

    public FaceInfo[] Detect(Image img, java.util.Map<String, String> __ctx)
    {
        return Detect(img, __ctx, true);
    }

    private FaceInfo[] Detect(Image img, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__Detect_name);
        return end_Detect(begin_Detect(img, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_Detect(Image img)
    {
        return begin_Detect(img, null, false, false, null);
    }

    public Ice.AsyncResult begin_Detect(Image img, java.util.Map<String, String> __ctx)
    {
        return begin_Detect(img, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_Detect(Image img, Ice.Callback __cb)
    {
        return begin_Detect(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_Detect(Image img, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Detect(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_Detect(Image img, Callback_FaceAlgSvr_Detect __cb)
    {
        return begin_Detect(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_Detect(Image img, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_Detect __cb)
    {
        return begin_Detect(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_Detect(Image img, 
                                        IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_Detect(img, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_Detect(Image img, 
                                        IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Detect(img, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_Detect(Image img, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_Detect(img, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_Detect(Image img, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Detect(img, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_Detect(Image img, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Detect(img, __ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.FaceInfo[]>(__responseCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        FaceAlgSvrPrxHelper.__Detect_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_Detect(Image img, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__Detect_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__Detect_name, __cb);
        try
        {
            __result.prepare(__Detect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Image.__write(__os, img);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FaceInfo[] end_Detect(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __Detect_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FaceInfo[] __ret;
            __ret = FaceInfoSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __Detect_completed(Ice.TwowayCallbackArg1<FaceInfo[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        FaceInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_Detect(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __DetectNIR_name = "DetectNIR";

    public FaceInfo[] DetectNIR(Image img)
    {
        return DetectNIR(img, null, false);
    }

    public FaceInfo[] DetectNIR(Image img, java.util.Map<String, String> __ctx)
    {
        return DetectNIR(img, __ctx, true);
    }

    private FaceInfo[] DetectNIR(Image img, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__DetectNIR_name);
        return end_DetectNIR(begin_DetectNIR(img, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_DetectNIR(Image img)
    {
        return begin_DetectNIR(img, null, false, false, null);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, java.util.Map<String, String> __ctx)
    {
        return begin_DetectNIR(img, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, Ice.Callback __cb)
    {
        return begin_DetectNIR(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DetectNIR(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, Callback_FaceAlgSvr_DetectNIR __cb)
    {
        return begin_DetectNIR(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_DetectNIR __cb)
    {
        return begin_DetectNIR(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, 
                                           IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DetectNIR(img, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, 
                                           IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectNIR(img, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DetectNIR(img, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DetectNIR(Image img, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectNIR(img, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_DetectNIR(Image img, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectNIR(img, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.FaceInfo[]>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           FaceAlgSvrPrxHelper.__DetectNIR_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_DetectNIR(Image img, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DetectNIR_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__DetectNIR_name, __cb);
        try
        {
            __result.prepare(__DetectNIR_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Image.__write(__os, img);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FaceInfo[] end_DetectNIR(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __DetectNIR_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FaceInfo[] __ret;
            __ret = FaceInfoSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __DetectNIR_completed(Ice.TwowayCallbackArg1<FaceInfo[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        FaceInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_DetectNIR(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __DetectSimple_name = "DetectSimple";

    public FaceInfo[] DetectSimple(Image img)
    {
        return DetectSimple(img, null, false);
    }

    public FaceInfo[] DetectSimple(Image img, java.util.Map<String, String> __ctx)
    {
        return DetectSimple(img, __ctx, true);
    }

    private FaceInfo[] DetectSimple(Image img, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__DetectSimple_name);
        return end_DetectSimple(begin_DetectSimple(img, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_DetectSimple(Image img)
    {
        return begin_DetectSimple(img, null, false, false, null);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, java.util.Map<String, String> __ctx)
    {
        return begin_DetectSimple(img, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, Ice.Callback __cb)
    {
        return begin_DetectSimple(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DetectSimple(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, Callback_FaceAlgSvr_DetectSimple __cb)
    {
        return begin_DetectSimple(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_DetectSimple __cb)
    {
        return begin_DetectSimple(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, 
                                              IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DetectSimple(img, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, 
                                              IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectSimple(img, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DetectSimple(img, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DetectSimple(Image img, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectSimple(img, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_DetectSimple(Image img, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectSimple(img, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.FaceInfo[]>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              FaceAlgSvrPrxHelper.__DetectSimple_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_DetectSimple(Image img, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DetectSimple_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__DetectSimple_name, __cb);
        try
        {
            __result.prepare(__DetectSimple_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Image.__write(__os, img);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FaceInfo[] end_DetectSimple(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __DetectSimple_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FaceInfo[] __ret;
            __ret = FaceInfoSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __DetectSimple_completed(Ice.TwowayCallbackArg1<FaceInfo[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        FaceInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_DetectSimple(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __DetectSimpleNIR_name = "DetectSimpleNIR";

    public FaceInfo[] DetectSimpleNIR(Image img)
    {
        return DetectSimpleNIR(img, null, false);
    }

    public FaceInfo[] DetectSimpleNIR(Image img, java.util.Map<String, String> __ctx)
    {
        return DetectSimpleNIR(img, __ctx, true);
    }

    private FaceInfo[] DetectSimpleNIR(Image img, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__DetectSimpleNIR_name);
        return end_DetectSimpleNIR(begin_DetectSimpleNIR(img, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img)
    {
        return begin_DetectSimpleNIR(img, null, false, false, null);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, java.util.Map<String, String> __ctx)
    {
        return begin_DetectSimpleNIR(img, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, Ice.Callback __cb)
    {
        return begin_DetectSimpleNIR(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DetectSimpleNIR(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, Callback_FaceAlgSvr_DetectSimpleNIR __cb)
    {
        return begin_DetectSimpleNIR(img, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_DetectSimpleNIR __cb)
    {
        return begin_DetectSimpleNIR(img, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, 
                                                 IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DetectSimpleNIR(img, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, 
                                                 IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectSimpleNIR(img, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DetectSimpleNIR(img, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DetectSimpleNIR(Image img, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectSimpleNIR(img, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_DetectSimpleNIR(Image img, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<FaceInfo[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DetectSimpleNIR(img, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.FaceInfo[]>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 FaceAlgSvrPrxHelper.__DetectSimpleNIR_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_DetectSimpleNIR(Image img, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DetectSimpleNIR_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__DetectSimpleNIR_name, __cb);
        try
        {
            __result.prepare(__DetectSimpleNIR_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Image.__write(__os, img);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FaceInfo[] end_DetectSimpleNIR(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __DetectSimpleNIR_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FaceInfo[] __ret;
            __ret = FaceInfoSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __DetectSimpleNIR_completed(Ice.TwowayCallbackArg1<FaceInfo[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        FaceInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_DetectSimpleNIR(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __GetAllFaceId_name = "GetAllFaceId";

    public String[] GetAllFaceId(String faceSetId)
    {
        return GetAllFaceId(faceSetId, null, false);
    }

    public String[] GetAllFaceId(String faceSetId, java.util.Map<String, String> __ctx)
    {
        return GetAllFaceId(faceSetId, __ctx, true);
    }

    private String[] GetAllFaceId(String faceSetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__GetAllFaceId_name);
        return end_GetAllFaceId(begin_GetAllFaceId(faceSetId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId)
    {
        return begin_GetAllFaceId(faceSetId, null, false, false, null);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, java.util.Map<String, String> __ctx)
    {
        return begin_GetAllFaceId(faceSetId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, Ice.Callback __cb)
    {
        return begin_GetAllFaceId(faceSetId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetAllFaceId(faceSetId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, Callback_FaceAlgSvr_GetAllFaceId __cb)
    {
        return begin_GetAllFaceId(faceSetId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_GetAllFaceId __cb)
    {
        return begin_GetAllFaceId(faceSetId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetAllFaceId(faceSetId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetAllFaceId(faceSetId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetAllFaceId(faceSetId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetAllFaceId(String faceSetId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetAllFaceId(faceSetId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetAllFaceId(String faceSetId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetAllFaceId(faceSetId, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              FaceAlgSvrPrxHelper.__GetAllFaceId_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_GetAllFaceId(String faceSetId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetAllFaceId_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetAllFaceId_name, __cb);
        try
        {
            __result.prepare(__GetAllFaceId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_GetAllFaceId(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetAllFaceId_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = StringSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetAllFaceId_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_GetAllFaceId(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __GetFaceCount_name = "GetFaceCount";

    public int GetFaceCount(String faceSetId)
    {
        return GetFaceCount(faceSetId, null, false);
    }

    public int GetFaceCount(String faceSetId, java.util.Map<String, String> __ctx)
    {
        return GetFaceCount(faceSetId, __ctx, true);
    }

    private int GetFaceCount(String faceSetId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__GetFaceCount_name);
        return end_GetFaceCount(begin_GetFaceCount(faceSetId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId)
    {
        return begin_GetFaceCount(faceSetId, null, false, false, null);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, java.util.Map<String, String> __ctx)
    {
        return begin_GetFaceCount(faceSetId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, Ice.Callback __cb)
    {
        return begin_GetFaceCount(faceSetId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetFaceCount(faceSetId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, Callback_FaceAlgSvr_GetFaceCount __cb)
    {
        return begin_GetFaceCount(faceSetId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_GetFaceCount __cb)
    {
        return begin_GetFaceCount(faceSetId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, 
                                              IceInternal.Functional_IntCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetFaceCount(faceSetId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, 
                                              IceInternal.Functional_IntCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetFaceCount(faceSetId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_IntCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetFaceCount(faceSetId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetFaceCount(String faceSetId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_IntCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetFaceCount(faceSetId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetFaceCount(String faceSetId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_IntCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetFaceCount(faceSetId, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              FaceAlgSvrPrxHelper.__GetFaceCount_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_GetFaceCount(String faceSetId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetFaceCount_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetFaceCount_name, __cb);
        try
        {
            __result.prepare(__GetFaceCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_GetFaceCount(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetFaceCount_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetFaceCount_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_GetFaceCount(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __MatchFeatures_name = "MatchFeatures";

    public float MatchFeatures(float[] fea1, float[] fea2)
    {
        return MatchFeatures(fea1, fea2, null, false);
    }

    public float MatchFeatures(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx)
    {
        return MatchFeatures(fea1, fea2, __ctx, true);
    }

    private float MatchFeatures(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__MatchFeatures_name);
        return end_MatchFeatures(begin_MatchFeatures(fea1, fea2, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, float[] fea2)
    {
        return begin_MatchFeatures(fea1, fea2, null, false, false, null);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx)
    {
        return begin_MatchFeatures(fea1, fea2, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, float[] fea2, Ice.Callback __cb)
    {
        return begin_MatchFeatures(fea1, fea2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_MatchFeatures(fea1, fea2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, float[] fea2, Callback_FaceAlgSvr_MatchFeatures __cb)
    {
        return begin_MatchFeatures(fea1, fea2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_MatchFeatures __cb)
    {
        return begin_MatchFeatures(fea1, fea2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, 
                                               float[] fea2, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchFeatures(fea1, fea2, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, 
                                               float[] fea2, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchFeatures(fea1, fea2, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, 
                                               float[] fea2, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchFeatures(fea1, fea2, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchFeatures(float[] fea1, 
                                               float[] fea2, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchFeatures(fea1, fea2, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_MatchFeatures(float[] fea1, 
                                                float[] fea2, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_FloatCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchFeatures(fea1, fea2, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackFloat(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               FaceAlgSvrPrxHelper.__MatchFeatures_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_MatchFeatures(float[] fea1, 
                                                float[] fea2, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__MatchFeatures_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__MatchFeatures_name, __cb);
        try
        {
            __result.prepare(__MatchFeatures_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            FloatSeqHelper.write(__os, fea1);
            FloatSeqHelper.write(__os, fea2);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float end_MatchFeatures(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __MatchFeatures_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float __ret;
            __ret = __is.readFloat();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __MatchFeatures_completed(Ice.TwowayCallbackFloat __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        float __ret = (float)0.0;
        try
        {
            __ret = __proxy.end_MatchFeatures(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __MatchFeaturesNIR_name = "MatchFeaturesNIR";

    public float MatchFeaturesNIR(float[] fea1, float[] fea2)
    {
        return MatchFeaturesNIR(fea1, fea2, null, false);
    }

    public float MatchFeaturesNIR(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx)
    {
        return MatchFeaturesNIR(fea1, fea2, __ctx, true);
    }

    private float MatchFeaturesNIR(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__MatchFeaturesNIR_name);
        return end_MatchFeaturesNIR(begin_MatchFeaturesNIR(fea1, fea2, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, float[] fea2)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, null, false, false, null);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, float[] fea2, Ice.Callback __cb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, float[] fea2, Callback_FaceAlgSvr_MatchFeaturesNIR __cb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, float[] fea2, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_MatchFeaturesNIR __cb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, 
                                                  float[] fea2, 
                                                  IceInternal.Functional_FloatCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, 
                                                  float[] fea2, 
                                                  IceInternal.Functional_FloatCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, 
                                                  float[] fea2, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_FloatCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, 
                                                  float[] fea2, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_FloatCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, 
                                                   float[] fea2, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_FloatCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchFeaturesNIR(fea1, fea2, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackFloat(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  FaceAlgSvrPrxHelper.__MatchFeaturesNIR_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_MatchFeaturesNIR(float[] fea1, 
                                                   float[] fea2, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__MatchFeaturesNIR_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__MatchFeaturesNIR_name, __cb);
        try
        {
            __result.prepare(__MatchFeaturesNIR_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            FloatSeqHelper.write(__os, fea1);
            FloatSeqHelper.write(__os, fea2);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float end_MatchFeaturesNIR(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __MatchFeaturesNIR_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float __ret;
            __ret = __is.readFloat();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __MatchFeaturesNIR_completed(Ice.TwowayCallbackFloat __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        float __ret = (float)0.0;
        try
        {
            __ret = __proxy.end_MatchFeaturesNIR(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __MatchImage_name = "MatchImage";

    public float MatchImage(Image img1, Image img2)
    {
        return MatchImage(img1, img2, null, false);
    }

    public float MatchImage(Image img1, Image img2, java.util.Map<String, String> __ctx)
    {
        return MatchImage(img1, img2, __ctx, true);
    }

    private float MatchImage(Image img1, Image img2, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__MatchImage_name);
        return end_MatchImage(begin_MatchImage(img1, img2, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, Image img2)
    {
        return begin_MatchImage(img1, img2, null, false, false, null);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, Image img2, java.util.Map<String, String> __ctx)
    {
        return begin_MatchImage(img1, img2, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, Image img2, Ice.Callback __cb)
    {
        return begin_MatchImage(img1, img2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, Image img2, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_MatchImage(img1, img2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, Image img2, Callback_FaceAlgSvr_MatchImage __cb)
    {
        return begin_MatchImage(img1, img2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, Image img2, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_MatchImage __cb)
    {
        return begin_MatchImage(img1, img2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, 
                                            Image img2, 
                                            IceInternal.Functional_FloatCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchImage(img1, img2, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, 
                                            Image img2, 
                                            IceInternal.Functional_FloatCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchImage(img1, img2, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, 
                                            Image img2, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_FloatCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchImage(img1, img2, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchImage(Image img1, 
                                            Image img2, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_FloatCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchImage(img1, img2, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_MatchImage(Image img1, 
                                             Image img2, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_FloatCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchImage(img1, img2, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackFloat(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            FaceAlgSvrPrxHelper.__MatchImage_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_MatchImage(Image img1, 
                                             Image img2, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__MatchImage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__MatchImage_name, __cb);
        try
        {
            __result.prepare(__MatchImage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Image.__write(__os, img1);
            Image.__write(__os, img2);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float end_MatchImage(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __MatchImage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float __ret;
            __ret = __is.readFloat();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __MatchImage_completed(Ice.TwowayCallbackFloat __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        float __ret = (float)0.0;
        try
        {
            __ret = __proxy.end_MatchImage(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __MatchImageNIR_name = "MatchImageNIR";

    public float MatchImageNIR(Image img1, Image img2)
    {
        return MatchImageNIR(img1, img2, null, false);
    }

    public float MatchImageNIR(Image img1, Image img2, java.util.Map<String, String> __ctx)
    {
        return MatchImageNIR(img1, img2, __ctx, true);
    }

    private float MatchImageNIR(Image img1, Image img2, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__MatchImageNIR_name);
        return end_MatchImageNIR(begin_MatchImageNIR(img1, img2, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, Image img2)
    {
        return begin_MatchImageNIR(img1, img2, null, false, false, null);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, Image img2, java.util.Map<String, String> __ctx)
    {
        return begin_MatchImageNIR(img1, img2, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, Image img2, Ice.Callback __cb)
    {
        return begin_MatchImageNIR(img1, img2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, Image img2, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_MatchImageNIR(img1, img2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, Image img2, Callback_FaceAlgSvr_MatchImageNIR __cb)
    {
        return begin_MatchImageNIR(img1, img2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, Image img2, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_MatchImageNIR __cb)
    {
        return begin_MatchImageNIR(img1, img2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, 
                                               Image img2, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchImageNIR(img1, img2, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, 
                                               Image img2, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchImageNIR(img1, img2, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, 
                                               Image img2, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_MatchImageNIR(img1, img2, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_MatchImageNIR(Image img1, 
                                               Image img2, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchImageNIR(img1, img2, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_MatchImageNIR(Image img1, 
                                                Image img2, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_FloatCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_MatchImageNIR(img1, img2, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackFloat(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               FaceAlgSvrPrxHelper.__MatchImageNIR_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_MatchImageNIR(Image img1, 
                                                Image img2, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__MatchImageNIR_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__MatchImageNIR_name, __cb);
        try
        {
            __result.prepare(__MatchImageNIR_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Image.__write(__os, img1);
            Image.__write(__os, img2);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float end_MatchImageNIR(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __MatchImageNIR_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float __ret;
            __ret = __is.readFloat();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __MatchImageNIR_completed(Ice.TwowayCallbackFloat __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        float __ret = (float)0.0;
        try
        {
            __ret = __proxy.end_MatchImageNIR(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __RecognizeFeatures_name = "RecognizeFeatures";

    public RecogResult[] RecognizeFeatures(String faceSetId, float[] fea, int n)
    {
        return RecognizeFeatures(faceSetId, fea, n, null, false);
    }

    public RecogResult[] RecognizeFeatures(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx)
    {
        return RecognizeFeatures(faceSetId, fea, n, __ctx, true);
    }

    private RecogResult[] RecognizeFeatures(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__RecognizeFeatures_name);
        return end_RecognizeFeatures(begin_RecognizeFeatures(faceSetId, fea, n, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, float[] fea, int n)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, null, false, false, null);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, float[] fea, int n, Ice.Callback __cb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, float[] fea, int n, Callback_FaceAlgSvr_RecognizeFeatures __cb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_RecognizeFeatures __cb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, 
                                                   float[] fea, 
                                                   int n, 
                                                   IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, 
                                                   float[] fea, 
                                                   int n, 
                                                   IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, 
                                                   float[] fea, 
                                                   int n, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, 
                                                   float[] fea, 
                                                   int n, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, 
                                                    float[] fea, 
                                                    int n, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeFeatures(faceSetId, fea, n, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.RecogResult[]>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   FaceAlgSvrPrxHelper.__RecognizeFeatures_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_RecognizeFeatures(String faceSetId, 
                                                    float[] fea, 
                                                    int n, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RecognizeFeatures_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__RecognizeFeatures_name, __cb);
        try
        {
            __result.prepare(__RecognizeFeatures_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            FloatSeqHelper.write(__os, fea);
            __os.writeInt(n);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public RecogResult[] end_RecognizeFeatures(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __RecognizeFeatures_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            RecogResult[] __ret;
            __ret = RecogResultSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __RecognizeFeatures_completed(Ice.TwowayCallbackArg1<RecogResult[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        RecogResult[] __ret = null;
        try
        {
            __ret = __proxy.end_RecognizeFeatures(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __RecognizeFeaturesNIR_name = "RecognizeFeaturesNIR";

    public RecogResult[] RecognizeFeaturesNIR(String faceSetId, float[] fea, int n)
    {
        return RecognizeFeaturesNIR(faceSetId, fea, n, null, false);
    }

    public RecogResult[] RecognizeFeaturesNIR(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx)
    {
        return RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, true);
    }

    private RecogResult[] RecognizeFeaturesNIR(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__RecognizeFeaturesNIR_name);
        return end_RecognizeFeaturesNIR(begin_RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, float[] fea, int n)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, null, false, false, null);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, float[] fea, int n, Ice.Callback __cb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, float[] fea, int n, Callback_FaceAlgSvr_RecognizeFeaturesNIR __cb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, float[] fea, int n, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_RecognizeFeaturesNIR __cb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, 
                                                      float[] fea, 
                                                      int n, 
                                                      IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, 
                                                      float[] fea, 
                                                      int n, 
                                                      IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, 
                                                      float[] fea, 
                                                      int n, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, 
                                                      float[] fea, 
                                                      int n, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, 
                                                       float[] fea, 
                                                       int n, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<RecogResult[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeFeaturesNIR(faceSetId, fea, n, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.RecogResult[]>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      FaceAlgSvrPrxHelper.__RecognizeFeaturesNIR_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_RecognizeFeaturesNIR(String faceSetId, 
                                                       float[] fea, 
                                                       int n, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RecognizeFeaturesNIR_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__RecognizeFeaturesNIR_name, __cb);
        try
        {
            __result.prepare(__RecognizeFeaturesNIR_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            FloatSeqHelper.write(__os, fea);
            __os.writeInt(n);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public RecogResult[] end_RecognizeFeaturesNIR(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __RecognizeFeaturesNIR_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            RecogResult[] __ret;
            __ret = RecogResultSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __RecognizeFeaturesNIR_completed(Ice.TwowayCallbackArg1<RecogResult[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        RecogResult[] __ret = null;
        try
        {
            __ret = __proxy.end_RecognizeFeaturesNIR(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __RecognizeImage_name = "RecognizeImage";

    public FaceInfoEx[] RecognizeImage(String faceSetId, Image img, int n)
    {
        return RecognizeImage(faceSetId, img, n, null, false);
    }

    public FaceInfoEx[] RecognizeImage(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx)
    {
        return RecognizeImage(faceSetId, img, n, __ctx, true);
    }

    private FaceInfoEx[] RecognizeImage(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__RecognizeImage_name);
        return end_RecognizeImage(begin_RecognizeImage(faceSetId, img, n, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, Image img, int n)
    {
        return begin_RecognizeImage(faceSetId, img, n, null, false, false, null);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx)
    {
        return begin_RecognizeImage(faceSetId, img, n, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, Image img, int n, Ice.Callback __cb)
    {
        return begin_RecognizeImage(faceSetId, img, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RecognizeImage(faceSetId, img, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, Image img, int n, Callback_FaceAlgSvr_RecognizeImage __cb)
    {
        return begin_RecognizeImage(faceSetId, img, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_RecognizeImage __cb)
    {
        return begin_RecognizeImage(faceSetId, img, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, 
                                                Image img, 
                                                int n, 
                                                IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeImage(faceSetId, img, n, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, 
                                                Image img, 
                                                int n, 
                                                IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeImage(faceSetId, img, n, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, 
                                                Image img, 
                                                int n, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeImage(faceSetId, img, n, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeImage(String faceSetId, 
                                                Image img, 
                                                int n, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeImage(faceSetId, img, n, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_RecognizeImage(String faceSetId, 
                                                 Image img, 
                                                 int n, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeImage(faceSetId, img, n, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.FaceInfoEx[]>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                FaceAlgSvrPrxHelper.__RecognizeImage_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_RecognizeImage(String faceSetId, 
                                                 Image img, 
                                                 int n, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RecognizeImage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__RecognizeImage_name, __cb);
        try
        {
            __result.prepare(__RecognizeImage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            Image.__write(__os, img);
            __os.writeInt(n);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FaceInfoEx[] end_RecognizeImage(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __RecognizeImage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FaceInfoEx[] __ret;
            __ret = FaceInfoExSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __RecognizeImage_completed(Ice.TwowayCallbackArg1<FaceInfoEx[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        FaceInfoEx[] __ret = null;
        try
        {
            __ret = __proxy.end_RecognizeImage(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __RecognizeImageNIR_name = "RecognizeImageNIR";

    public FaceInfoEx[] RecognizeImageNIR(String faceSetId, Image img, int n)
    {
        return RecognizeImageNIR(faceSetId, img, n, null, false);
    }

    public FaceInfoEx[] RecognizeImageNIR(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx)
    {
        return RecognizeImageNIR(faceSetId, img, n, __ctx, true);
    }

    private FaceInfoEx[] RecognizeImageNIR(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__RecognizeImageNIR_name);
        return end_RecognizeImageNIR(begin_RecognizeImageNIR(faceSetId, img, n, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, Image img, int n)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, null, false, false, null);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, Image img, int n, Ice.Callback __cb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, Image img, int n, Callback_FaceAlgSvr_RecognizeImageNIR __cb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, Image img, int n, java.util.Map<String, String> __ctx, Callback_FaceAlgSvr_RecognizeImageNIR __cb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, 
                                                   Image img, 
                                                   int n, 
                                                   IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, 
                                                   Image img, 
                                                   int n, 
                                                   IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, 
                                                   Image img, 
                                                   int n, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, 
                                                   Image img, 
                                                   int n, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, 
                                                    Image img, 
                                                    int n, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<FaceInfoEx[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_RecognizeImageNIR(faceSetId, img, n, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<FaceAlg.FaceInfoEx[]>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   FaceAlgSvrPrxHelper.__RecognizeImageNIR_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_RecognizeImageNIR(String faceSetId, 
                                                    Image img, 
                                                    int n, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__RecognizeImageNIR_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__RecognizeImageNIR_name, __cb);
        try
        {
            __result.prepare(__RecognizeImageNIR_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(faceSetId);
            Image.__write(__os, img);
            __os.writeInt(n);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FaceInfoEx[] end_RecognizeImageNIR(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __RecognizeImageNIR_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FaceInfoEx[] __ret;
            __ret = FaceInfoExSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __RecognizeImageNIR_completed(Ice.TwowayCallbackArg1<FaceInfoEx[]> __cb, Ice.AsyncResult __result)
    {
        FaceAlg.FaceAlgSvrPrx __proxy = (FaceAlg.FaceAlgSvrPrx)__result.getProxy();
        FaceInfoEx[] __ret = null;
        try
        {
            __ret = __proxy.end_RecognizeImageNIR(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static FaceAlgSvrPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), FaceAlgSvrPrx.class, FaceAlgSvrPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static FaceAlgSvrPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), FaceAlgSvrPrx.class, FaceAlgSvrPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static FaceAlgSvrPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), FaceAlgSvrPrx.class, FaceAlgSvrPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static FaceAlgSvrPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), FaceAlgSvrPrx.class, FaceAlgSvrPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static FaceAlgSvrPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, FaceAlgSvrPrx.class, FaceAlgSvrPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static FaceAlgSvrPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, FaceAlgSvrPrx.class, FaceAlgSvrPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::FaceAlg::FaceAlgSvr",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, FaceAlgSvrPrx v)
    {
        __os.writeProxy(v);
    }

    public static FaceAlgSvrPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            FaceAlgSvrPrxHelper result = new FaceAlgSvrPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
